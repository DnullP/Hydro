{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["export class Shorty {\n    data: string;\n    arrayBuffer?: Uint8Array;\n    curpos = 0;\n    bitCount = 7;\n    bitChar = 0;\n    nodes: any[] = [];\n    nyt = 0;\n    nodecount = 0;\n\n    constructor(public tokensize = 10) {\n        this.reset(true);\n    }\n\n    reset(full = false) {\n        if (full === true) {\n            this.nodes = [{ up: 0, weight: 0 }];\n            this.nyt = 0;\n            this.nodecount = 0;\n        }\n        this.data = '';\n        this.curpos = 0;\n        this.bitCount = 7;\n        this.bitChar = 0;\n    }\n\n    findNode(x) {\n        for (let i = this.nodes.length - 1; i > 0; i--) {\n            if (typeof this.nodes[i].symbol !== 'undefined' && this.nodes[i].symbol === x) return i;\n        }\n        return 0;\n    }\n\n    addNode(token) {\n        if (this.nodecount >= 2046) return 0;\n        this.nodes[++this.nodecount] = { up: this.nyt, symbol: token, weight: 1 };\n        this.nodes[++this.nodecount] = { up: this.nyt, weight: 0 };\n        this.nodes[this.nyt].weight += 1;\n        this.nyt = this.nodecount;\n        if (this.nodes[this.nodecount - 2].up !== this.nodecount - 2) this.balanceNode(this.nodes[this.nodecount - 2].up);\n        return this.nodecount - 2;\n    }\n\n    swapNode(a, b) {\n        const t = this.nodes[a].symbol;\n        const u = this.nodes[b].symbol;\n        const v = this.nodes[a].weight;\n        this.nodes[a].symbol = u;\n        this.nodes[b].symbol = t;\n        this.nodes[a].weight = this.nodes[b].weight;\n        this.nodes[b].weight = v;\n        for (let n = this.nodes.length - 1; n > 0; n--) {\n            if (this.nodes[n].up === a) this.nodes[n].up = b;\n            else if (this.nodes[n].up === b) this.nodes[n].up = a;\n        }\n    }\n\n    balanceNode(node) {\n        while (true) {\n            let minnr = node;\n            const weight = this.nodes[node].weight;\n            while (minnr > 1 && this.nodes[minnr - 1].weight === weight) minnr--;\n            if (minnr !== node && minnr !== this.nodes[node].up) {\n                this.swapNode(minnr, node);\n                node = minnr;\n            }\n            this.nodes[node].weight++;\n            if (this.nodes[node].up === node) return;\n            node = this.nodes[node].up;\n        }\n    }\n\n    emitNode(node) {\n        const emit: number[] = [];\n        while (node !== 0) {\n            emit.unshift(node % 2);\n            node = this.nodes[node].up;\n        }\n        for (let e = 0; e < emit.length; e++) this.emitBit(emit[e]);\n    }\n\n    emitNyt(token) {\n        this.emitNode(this.nyt);\n        const ll = token.length - 1;\n        if (this.tokensize > 8) this.emitBit(ll & 8);\n        if (this.tokensize > 4) this.emitBit(ll & 4);\n        if (this.tokensize > 2) this.emitBit(ll & 2);\n        if (this.tokensize > 1) this.emitBit(ll & 1);\n        for (let cc = 0; cc < token.length; cc++) { this.emitByte(token.charCodeAt(cc)); }\n        return this.nyt;\n    }\n\n    readNode(): number[] {\n        if (this.nyt === 0) {\n            let len = ((this.tokensize > 8) ? this.readBit() * 8 : 0) + ((this.tokensize > 4) ? this.readBit() * 4 : 0) + ((this.tokensize > 2) ? this.readBit() * 2 : 0) + ((this.tokensize > 1) ? this.readBit() : 0) + 1;\n            const stream: number[] = [];\n            while (len--) stream.push(this.readByte());\n            return stream;\n        }\n        let node = 0;\n        while (true) {\n            const bit = this.readBit();\n            if (this.nodes[node].symbol === undefined) {\n                for (let m = 0; ; m++) {\n                    if (this.nodes[m].up === node && m !== node && ((m % 2) === bit)) { node = m; break; }\n                }\n            }\n            if (this.nodes[node].symbol !== undefined || this.nodes[node].weight === 0) {\n                if (this.nodes[node].weight) return this.nodes[node].symbol;\n                let len = ((this.tokensize > 8) ? this.readBit() * 8 : 0) + ((this.tokensize > 4) ? this.readBit() * 4 : 0) + ((this.tokensize > 2) ? this.readBit() * 2 : 0) + ((this.tokensize > 1) ? this.readBit() : 0) + 1;\n                const stream: number[] = [];\n                while (len--) stream.push(this.readByte());\n                return stream;\n            }\n        }\n    }\n\n    emitBit(bit) {\n        if (bit) this.bitChar += 1 << this.bitCount;\n        if (--this.bitCount < 0) {\n            this.data += String.fromCharCode(this.bitChar);\n            this.bitCount = 7;\n            this.bitChar = 0;\n        }\n    }\n\n    emitByte(byte) {\n        for (let i = 7; i >= 0; i--) this.emitBit(byte >> i & 1);\n    }\n\n    readBit() {\n        if (this.curpos === this.data.length * 8) throw ('done');\n        const bit = this.data.charCodeAt(this.curpos >> 3) >> (7 - this.curpos & 7) & 1;\n        this.curpos++;\n        return bit;\n    }\n\n    readByte() {\n        let res = 0;\n        for (let i = 0; i < 8; i++) res += (128 >> i) * this.readBit();\n        return res;\n    }\n\n    deflate(data: string) {\n        let token;\n        this.arrayBuffer = new TextEncoder().encode(data);\n        const l = this.arrayBuffer.length;\n        let i;\n        let x;\n        this.reset();\n        for (i = 0; i < l; i++) {\n            token = String.fromCharCode(this.arrayBuffer[i]);\n            if (this.tokensize > 1) {\n                if (/[a-zA-Z]/.test(token)) {\n                    while ((i + 1) < l && token.length < this.tokensize && /[a-zA-Z]/.test(String.fromCharCode(this.arrayBuffer[i + 1]))) {\n                        token += String.fromCharCode(this.arrayBuffer[++i]);\n                    }\n                } else if (/[=[\\],.:\"'{}]/.test(token)) {\n                    while ((i + 1) < l && token.length < this.tokensize && /[=[\\],.:\"'{}]/.test(String.fromCharCode(this.arrayBuffer[i + 1]))) {\n                        i++;\n                        token += String.fromCharCode(this.arrayBuffer[i]);\n                    } // joe hl patch \"\n                }\n            }\n            x = this.findNode(token);\n            if (!x) {\n                this.emitNyt(token);\n                x = this.addNode(token);\n            } else {\n                this.emitNode(x);\n                this.balanceNode(x);\n            }\n        }\n        if (this.bitCount !== 7) {\n            const oldlength = this.arrayBuffer.length;\n            this.emitNode(this.nyt);\n            if (oldlength === this.arrayBuffer.length) this.emitByte(0);\n        }\n        return this.data;\n    }\n\n    inflate(data: string) {\n        this.reset();\n        this.data = data;\n\n        const output: number[] = [];\n        try {\n            while (true) {\n                const token = this.readNode();\n                output.push(...token);\n                const node = this.findNode(token);\n                if (!node) this.addNode(token);\n                else this.balanceNode(node);\n            }\n        } catch (e) { }\n        return new TextDecoder().decode(new Uint8Array(output));\n    }\n}\n\nexport default Shorty;\n"],
  "mappings": "AAAO,MAAM,OAAO;AAAA,EAUhB,YAAmB,YAAY,IAAI;AAAhB;AAPnB,kBAAS;AACT,oBAAW;AACX,mBAAU;AACV,iBAAe,CAAC;AAChB,eAAM;AACN,qBAAY;AAGR,SAAK,MAAM,IAAI;AAAA,EACnB;AAAA,EAEA,MAAM,OAAO,OAAO;AAChB,QAAI,SAAS,MAAM;AACf,WAAK,QAAQ,CAAC,EAAE,IAAI,GAAG,QAAQ,EAAE,CAAC;AAClC,WAAK,MAAM;AACX,WAAK,YAAY;AAAA,IACrB;AACA,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,SAAS,GAAG;AACR,aAAS,IAAI,KAAK,MAAM,SAAS,GAAG,IAAI,GAAG,KAAK;AAC5C,UAAI,OAAO,KAAK,MAAM,CAAC,EAAE,WAAW,eAAe,KAAK,MAAM,CAAC,EAAE,WAAW;AAAG,eAAO;AAAA,IAC1F;AACA,WAAO;AAAA,EACX;AAAA,EAEA,QAAQ,OAAO;AACX,QAAI,KAAK,aAAa;AAAM,aAAO;AACnC,SAAK,MAAM,EAAE,KAAK,SAAS,IAAI,EAAE,IAAI,KAAK,KAAK,QAAQ,OAAO,QAAQ,EAAE;AACxE,SAAK,MAAM,EAAE,KAAK,SAAS,IAAI,EAAE,IAAI,KAAK,KAAK,QAAQ,EAAE;AACzD,SAAK,MAAM,KAAK,GAAG,EAAE,UAAU;AAC/B,SAAK,MAAM,KAAK;AAChB,QAAI,KAAK,MAAM,KAAK,YAAY,CAAC,EAAE,OAAO,KAAK,YAAY;AAAG,WAAK,YAAY,KAAK,MAAM,KAAK,YAAY,CAAC,EAAE,EAAE;AAChH,WAAO,KAAK,YAAY;AAAA,EAC5B;AAAA,EAEA,SAAS,GAAG,GAAG;AACX,UAAM,IAAI,KAAK,MAAM,CAAC,EAAE;AACxB,UAAM,IAAI,KAAK,MAAM,CAAC,EAAE;AACxB,UAAM,IAAI,KAAK,MAAM,CAAC,EAAE;AACxB,SAAK,MAAM,CAAC,EAAE,SAAS;AACvB,SAAK,MAAM,CAAC,EAAE,SAAS;AACvB,SAAK,MAAM,CAAC,EAAE,SAAS,KAAK,MAAM,CAAC,EAAE;AACrC,SAAK,MAAM,CAAC,EAAE,SAAS;AACvB,aAAS,IAAI,KAAK,MAAM,SAAS,GAAG,IAAI,GAAG,KAAK;AAC5C,UAAI,KAAK,MAAM,CAAC,EAAE,OAAO;AAAG,aAAK,MAAM,CAAC,EAAE,KAAK;AAAA,eACtC,KAAK,MAAM,CAAC,EAAE,OAAO;AAAG,aAAK,MAAM,CAAC,EAAE,KAAK;AAAA,IACxD;AAAA,EACJ;AAAA,EAEA,YAAY,MAAM;AACd,WAAO,MAAM;AACT,UAAI,QAAQ;AACZ,YAAM,SAAS,KAAK,MAAM,IAAI,EAAE;AAChC,aAAO,QAAQ,KAAK,KAAK,MAAM,QAAQ,CAAC,EAAE,WAAW;AAAQ;AAC7D,UAAI,UAAU,QAAQ,UAAU,KAAK,MAAM,IAAI,EAAE,IAAI;AACjD,aAAK,SAAS,OAAO,IAAI;AACzB,eAAO;AAAA,MACX;AACA,WAAK,MAAM,IAAI,EAAE;AACjB,UAAI,KAAK,MAAM,IAAI,EAAE,OAAO;AAAM;AAClC,aAAO,KAAK,MAAM,IAAI,EAAE;AAAA,IAC5B;AAAA,EACJ;AAAA,EAEA,SAAS,MAAM;AACX,UAAM,OAAiB,CAAC;AACxB,WAAO,SAAS,GAAG;AACf,WAAK,QAAQ,OAAO,CAAC;AACrB,aAAO,KAAK,MAAM,IAAI,EAAE;AAAA,IAC5B;AACA,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ;AAAK,WAAK,QAAQ,KAAK,CAAC,CAAC;AAAA,EAC9D;AAAA,EAEA,QAAQ,OAAO;AACX,SAAK,SAAS,KAAK,GAAG;AACtB,UAAM,KAAK,MAAM,SAAS;AAC1B,QAAI,KAAK,YAAY;AAAG,WAAK,QAAQ,KAAK,CAAC;AAC3C,QAAI,KAAK,YAAY;AAAG,WAAK,QAAQ,KAAK,CAAC;AAC3C,QAAI,KAAK,YAAY;AAAG,WAAK,QAAQ,KAAK,CAAC;AAC3C,QAAI,KAAK,YAAY;AAAG,WAAK,QAAQ,KAAK,CAAC;AAC3C,aAAS,KAAK,GAAG,KAAK,MAAM,QAAQ,MAAM;AAAE,WAAK,SAAS,MAAM,WAAW,EAAE,CAAC;AAAA,IAAG;AACjF,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,WAAqB;AACjB,QAAI,KAAK,QAAQ,GAAG;AAChB,UAAI,OAAQ,KAAK,YAAY,IAAK,KAAK,QAAQ,IAAI,IAAI,MAAO,KAAK,YAAY,IAAK,KAAK,QAAQ,IAAI,IAAI,MAAO,KAAK,YAAY,IAAK,KAAK,QAAQ,IAAI,IAAI,MAAO,KAAK,YAAY,IAAK,KAAK,QAAQ,IAAI,KAAK;AAC9M,YAAM,SAAmB,CAAC;AAC1B,aAAO;AAAO,eAAO,KAAK,KAAK,SAAS,CAAC;AACzC,aAAO;AAAA,IACX;AACA,QAAI,OAAO;AACX,WAAO,MAAM;AACT,YAAM,MAAM,KAAK,QAAQ;AACzB,UAAI,KAAK,MAAM,IAAI,EAAE,WAAW,QAAW;AACvC,iBAAS,IAAI,KAAK,KAAK;AACnB,cAAI,KAAK,MAAM,CAAC,EAAE,OAAO,QAAQ,MAAM,QAAU,IAAI,MAAO,KAAM;AAAE,mBAAO;AAAG;AAAA,UAAO;AAAA,QACzF;AAAA,MACJ;AACA,UAAI,KAAK,MAAM,IAAI,EAAE,WAAW,UAAa,KAAK,MAAM,IAAI,EAAE,WAAW,GAAG;AACxE,YAAI,KAAK,MAAM,IAAI,EAAE;AAAQ,iBAAO,KAAK,MAAM,IAAI,EAAE;AACrD,YAAI,OAAQ,KAAK,YAAY,IAAK,KAAK,QAAQ,IAAI,IAAI,MAAO,KAAK,YAAY,IAAK,KAAK,QAAQ,IAAI,IAAI,MAAO,KAAK,YAAY,IAAK,KAAK,QAAQ,IAAI,IAAI,MAAO,KAAK,YAAY,IAAK,KAAK,QAAQ,IAAI,KAAK;AAC9M,cAAM,SAAmB,CAAC;AAC1B,eAAO;AAAO,iBAAO,KAAK,KAAK,SAAS,CAAC;AACzC,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,QAAQ,KAAK;AACT,QAAI;AAAK,WAAK,WAAW,KAAK,KAAK;AACnC,QAAI,EAAE,KAAK,WAAW,GAAG;AACrB,WAAK,QAAQ,OAAO,aAAa,KAAK,OAAO;AAC7C,WAAK,WAAW;AAChB,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAEA,SAAS,MAAM;AACX,aAAS,IAAI,GAAG,KAAK,GAAG;AAAK,WAAK,QAAQ,QAAQ,IAAI,CAAC;AAAA,EAC3D;AAAA,EAEA,UAAU;AACN,QAAI,KAAK,WAAW,KAAK,KAAK,SAAS;AAAG,YAAO;AACjD,UAAM,MAAM,KAAK,KAAK,WAAW,KAAK,UAAU,CAAC,MAAM,IAAI,KAAK,SAAS,KAAK;AAC9E,SAAK;AACL,WAAO;AAAA,EACX;AAAA,EAEA,WAAW;AACP,QAAI,MAAM;AACV,aAAS,IAAI,GAAG,IAAI,GAAG;AAAK,cAAQ,OAAO,KAAK,KAAK,QAAQ;AAC7D,WAAO;AAAA,EACX;AAAA,EAEA,QAAQ,MAAc;AAClB,QAAI;AACJ,SAAK,cAAc,IAAI,YAAY,EAAE,OAAO,IAAI;AAChD,UAAM,IAAI,KAAK,YAAY;AAC3B,QAAI;AACJ,QAAI;AACJ,SAAK,MAAM;AACX,SAAK,IAAI,GAAG,IAAI,GAAG,KAAK;AACpB,cAAQ,OAAO,aAAa,KAAK,YAAY,CAAC,CAAC;AAC/C,UAAI,KAAK,YAAY,GAAG;AACpB,YAAI,WAAW,KAAK,KAAK,GAAG;AACxB,iBAAQ,IAAI,IAAK,KAAK,MAAM,SAAS,KAAK,aAAa,WAAW,KAAK,OAAO,aAAa,KAAK,YAAY,IAAI,CAAC,CAAC,CAAC,GAAG;AAClH,qBAAS,OAAO,aAAa,KAAK,YAAY,EAAE,CAAC,CAAC;AAAA,UACtD;AAAA,QACJ,WAAW,gBAAgB,KAAK,KAAK,GAAG;AACpC,iBAAQ,IAAI,IAAK,KAAK,MAAM,SAAS,KAAK,aAAa,gBAAgB,KAAK,OAAO,aAAa,KAAK,YAAY,IAAI,CAAC,CAAC,CAAC,GAAG;AACvH;AACA,qBAAS,OAAO,aAAa,KAAK,YAAY,CAAC,CAAC;AAAA,UACpD;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,KAAK,SAAS,KAAK;AACvB,UAAI,CAAC,GAAG;AACJ,aAAK,QAAQ,KAAK;AAClB,YAAI,KAAK,QAAQ,KAAK;AAAA,MAC1B,OAAO;AACH,aAAK,SAAS,CAAC;AACf,aAAK,YAAY,CAAC;AAAA,MACtB;AAAA,IACJ;AACA,QAAI,KAAK,aAAa,GAAG;AACrB,YAAM,YAAY,KAAK,YAAY;AACnC,WAAK,SAAS,KAAK,GAAG;AACtB,UAAI,cAAc,KAAK,YAAY;AAAQ,aAAK,SAAS,CAAC;AAAA,IAC9D;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,QAAQ,MAAc;AAClB,SAAK,MAAM;AACX,SAAK,OAAO;AAEZ,UAAM,SAAmB,CAAC;AAC1B,QAAI;AACA,aAAO,MAAM;AACT,cAAM,QAAQ,KAAK,SAAS;AAC5B,eAAO,KAAK,GAAG,KAAK;AACpB,cAAM,OAAO,KAAK,SAAS,KAAK;AAChC,YAAI,CAAC;AAAM,eAAK,QAAQ,KAAK;AAAA;AACxB,eAAK,YAAY,IAAI;AAAA,MAC9B;AAAA,IACJ,SAAS,GAAP;AAAA,IAAY;AACd,WAAO,IAAI,YAAY,EAAE,OAAO,IAAI,WAAW,MAAM,CAAC;AAAA,EAC1D;AACJ;AAEA,IAAO,iBAAQ;",
  "names": []
}
